/* Generated By:JavaCC: Do not edit this line. SASplusParser.java */
package sas.parser;

import sas.data.*;
import sas.data.SASAxiom.SASPair;
import sas.util.CausalGraphLink;

import javaff.graph.*;

import java.io.PrintStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Hashtable;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.StringTokenizer;

import java.math.BigDecimal;

public class SASplusParser implements SASplusParserConstants {
        /**
	 * This problem contains all, infiltered information from the SAS translation, which comprised of the 
	 * "output.sas", "test.group" and "all.groups". Some of the information in this is copied over to 
	 * sasProblemOptimised. This has no DTGs or causal graph.
	 */
        public static SASProblem sasProblemAll = new SASProblem();

        /**
	 * This problem is the filtered version of the "pure" problem which is parsed in from "output". It 
	 * included DTGs and the causal graph.
	 */
        public static SASProblem sasProblemOptimised = new SASProblem();
        /**
	 *The translator doesn't guarantee the contents of the preprocess file will have its variables
	 *in ascending order- something output.sas does seem to guarantee. Thus we need this incredibly
	 *annoying index -> variable map for lookups.
	 */
        public static Map<Integer, Integer> varIndexMap = new HashMap<Integer, Integer>();

        /**
	 * The default cost of an action in SAS+. The translator often parses these as zero, but
	 * in reality we want a transition to cost *something*! In addition to this, it allows a
	 * distinction between axioms which cost nothing. Defaults to 1.
	 */
        private static double DefaultActionCost = 1d;

    public static SASProblem parse() throws FileNotFoundException, IOException, ParseException
    {
        return SASplusParser.parse(new File("output.sas"), new File("test.groups"), new File("all.groups"), new File("output"));
    }

    public static SASProblem parse(File outputSas, File testGroups, File allGroups, File output) throws FileNotFoundException, IOException, ParseException
    {
                reset();

                parseOutputSAS(outputSas, SASplusParser.sasProblemAll);
                System.out.println("Successfully parsed output.sas");

                parseTestGroups(testGroups, SASplusParser.sasProblemAll);
                System.out.println("Successfully parsed test.groups");
                parseAllGroups(allGroups, SASplusParser.sasProblemAll);
                System.out.println("Successfully parsed all.groups");

                //need to add mutexes and variables to the optimised problem because they 
                //will not be re-parsed
                SASplusParser.sasProblemOptimised.mutexes = SASplusParser.sasProblemAll.mutexes;
                SASplusParser.sasProblemOptimised.variables = SASplusParser.sasProblemAll.variables;
                SASplusParser.sasProblemOptimised.axioms = SASplusParser.sasProblemAll.axioms;
                SASplusParser.sasProblemOptimised.derivedPredicates = SASplusParser.sasProblemAll.derivedPredicates;

                parsePreprocess(output, SASplusParser.sasProblemOptimised);
                System.out.println("Successfully parsed output preprocess file");

                setupDefaultActionCosts(sasProblemAll);
                setupDefaultActionCosts(sasProblemOptimised);

                sasProblemAll.setupInitialState();

                return sasProblemOptimised;
        }


    protected static SASProblem parseTranslationKey(File outputSas, File testGroups, File allGroups) throws FileNotFoundException, IOException, ParseException
    {
                parseOutputSAS(outputSas, SASplusParser.sasProblemAll);
                System.out.println("Successfully parsed output.sas");

                parseTestGroups(testGroups, SASplusParser.sasProblemAll);
                System.out.println("Successfully parsed test.groups");
                parseAllGroups(allGroups, SASplusParser.sasProblemAll);
                System.out.println("Successfully parsed all.groups");

                return sasProblemAll;
        }

        protected static SASProblem parsePreprocess(File file, SASProblem sp) throws FileNotFoundException, IOException, ParseException
        {
        FileReader tFileReader = new FileReader(file);
                SASplusParser parser = new SASplusParser(tFileReader);
        parser.parsePreprocess(sp);
        tFileReader.close();

        return sasProblemOptimised;
        }

        protected static void parseTestGroups(File file, SASProblem sp) throws FileNotFoundException, IOException, ParseException
        {
        FileReader tFileReader = new FileReader(file);
                SASplusParser parser = new SASplusParser(tFileReader);
        parser.parseTestGroups(sp);
        tFileReader.close();
        }

    protected static void parseAllGroups(File file, SASProblem sp) throws FileNotFoundException, IOException, ParseException
    {
        FileReader tFileReader = new FileReader(file);
                SASplusParser parser = new SASplusParser(tFileReader);
        parser.parseAllGroups(sp);
        tFileReader.close();
    }


    protected static void parseOutputSAS(File file, SASProblem sp) throws FileNotFoundException, IOException, ParseException
    {
        FileReader tFileReader = new FileReader(file);
                SASplusParser parser = new SASplusParser(tFileReader);
        parser.parseOutputSAS(SASplusParser.sasProblemAll);
        tFileReader.close();
        }

        protected static void detectVariableNames(SASProblem sp)
        {
                // set up names for the variables in the DTGs. These are
                // extrapolated in the same manner as 'all.groups' mutexes, but instead
                // use test.groups variable domains.
                int defaultCount = 0; // reset for test.groups variable domains
                for (SASVariable v : sp.variables.values())
                {
                        // PDDLObject var = null;
                        HashSet<SASParameter> common = null;
                        for (SASLiteral p : v.getValues())
                        {
                                if (p instanceof NoneOfThoseProposition)
                                        continue;

                                if (common == null)
                                {
                                        common = new HashSet<SASParameter>();
                                        common.addAll(p.getParameters());
                                }
                                else
                                {
                                        common.retainAll(p.getParameters());
                                }
                        }

                        SASParameter finalVar;
                        if (v.getValues().size() == 2 && v.getValues().contains(new NoneOfThoseProposition()))
                                finalVar = new SASDomainObject(defaultCount++);
                        else if (v.getValues().size() > 1 && common.size() == 1)
                                // && SAS.varDomains.containsKey(common.iterator().next()) ==
                                // false)
                                finalVar = (SASParameter) common.iterator().next();
                        else if (v.getValues().size() == 1 && v.getValues().contains(new NoneOfThoseProposition()))
                                finalVar = new SASDomainObject(defaultCount++);
                        else if (v.getValues().size() == 1)
                                finalVar = new SASParameter(v.getValues().get(0).toString());
                        else
                                finalVar = new SASDomainObject(defaultCount++);

                        // put the variable and the domain into the SAS problem
                        v.setObject(finalVar);
                }
        }

        protected static void detectMutexVariableNames(SASProblem sp)
        {
                // try to detect the names of variables of the form (varX) by
                // extrapolating common
                // parameters from their mutexes. If none exist, just use a default name
                int defaultCount = 0;
                for (SASMutexGroup m : sp.mutexes.values())
                {
                        HashSet<SASParameter> common = null;
                        for (SASLiteral p : m.getMutexes())
                        {
                                if (common == null)
                                {
                                        common = new HashSet<SASParameter>();
                                        common.addAll(p.getParameters());
                                }
                                else
                                {
                                        common.retainAll(p.getParameters());
                                }
                        }

                        SASParameter finalVar;
                        if (m.getMutexes().size() > 1 && common.size() == 1)
                                finalVar = common.iterator().next();
                        else if (m.getMutexes().size() == 1)
                                finalVar = new SASParameter(m.getMutexes().iterator().next()
                                                .toString());
                        else
                                finalVar = new SASParameter("sasvar" + defaultCount++);

                        m.setObject((SASParameter) finalVar);
                }
        }

        protected static void setupDefaultActionCosts(SASProblem sp)
        {
                for (SASAction a : sp.actions.values())
                {
                        if (a instanceof SASAxiom == false)
                                a.setCost(SASplusParser.DefaultActionCost);
                        else
                                a.setCost(0);
                }

                //this should probably already have been done in the above loop, but check anyway
                for (Map<Integer, SASAxiom> v : sp.axioms.values())
                {
                        for (SASAxiom ax : v.values())
                        {
                                ax.setCost(0);
                        }
                }
        }


        public static void reset()
        {
                SASplusParser.sasProblemAll = new SASProblem();
                SASplusParser.sasProblemOptimised = new SASProblem();

                SASplusParser.varIndexMap = new HashMap<Integer, Integer>();
        }

// ******************************************************************************
// *																			*
// * 							Parse the 3 sasProblemAll+ files							*
// *																			*
// ******************************************************************************
  final public void parsePreprocess(SASProblem sp) throws ParseException {
        Token t;
        Map<Integer, DomainTransitionGraph> dtgs;
    jj_consume_token(NUMBER);
    if (jj_2_1(5)) {
      parseMetric(sp);
    } else {
      ;
    }
    parseVariableSection(sp);
    parseInitialState(sp);
    parseGoal(sp);
    parseOperators(sp);
    parseAxioms(sp);
    parseSG();
    dtgs = parseDTGs(sp);
    parseCG(sp, dtgs.values());
  }

  final public void parseCG(SASProblem sp, Collection<DomainTransitionGraph> dtgs) throws ParseException {
        Token t;
        int varCounter = 0;
        CausalGraph cg = new CausalGraph();
        //must explicitely add every dtg vertex first
        for (DomainTransitionGraph dtg : dtgs)
        {
                cg.addVertex(dtg);
        }
    jj_consume_token(BEGIN_CG);
    label_1:
    while (true) {
      if (jj_2_2(5)) {
        ;
      } else {
        break label_1;
      }
      //variable id
                      t = jj_consume_token(NUMBER);
                        int varId = this.varIndexMap.get(varCounter);
                        int arcs = Integer.parseInt(t.toString());
                        for (int i = 0; i < arcs; i++)
                        {
                                int[] arr = parseSASVariableValuePair();
                                int target = this.varIndexMap.get(arr[0]);
                                CausalGraphLink e = cg.addEdge(varId, target);
                                e.setWeight(arr[1]);
                        }

                        varCounter++;
    }
    jj_consume_token(END_CG);
                cg.findLeavesAndRoots();

                sp.causalGraph = cg;
  }

/**
 * Parses the DTG section of the preprocess file. The map returned is of the form 
 * (original var ID -> DTG). That is, the key is the correct DTG variable ID, not 
 * the one from the preprocess variable section, ie 0 -> DTG(0), 1 -> DTG(1), not 1 -> DTG(2).
 */
  final public Map<Integer, DomainTransitionGraph> parseDTGs(SASProblem sp) throws ParseException {
        Token t;
        DomainTransitionGraph dtg;
        Map<Integer, DomainTransitionGraph> dtgs = new HashMap<Integer, DomainTransitionGraph>();
        int varCount = 0;
    label_2:
    while (true) {
      if (jj_2_3(5)) {
        ;
      } else {
        break label_2;
      }
      dtg = parseDTG(this.varIndexMap.get(varCount), sp);
                dtgs.put(this.varIndexMap.get(varCount), dtg);

                varCount++;
    }
                {if (true) return dtgs;}
    throw new Error("Missing return statement in function");
  }

  /**
   * varId parameter is assumed to already be the correct var id from the lookup table.
   * @param varId
   * @return
   * @throws ParseException
   */
  final public DomainTransitionGraph parseDTG(int varId, SASProblem sp) throws ParseException {
        Token t, t2, t3;
        //look up the variable for the DTG by looking up varId in the groups created from test.groups
        DomainTransitionGraph dtg = new DomainTransitionGraph(varId, sp.variables.get(varId));
        int numberOfTransitions;
        int targetValue;
        int operatorIndex;
        int numberOfConditions;
        int valueCount;
                valueCount = 0; //we are working on this value's outgoing transitions

    jj_consume_token(BEGIN_DTG);
    label_3:
    while (true) {
      if (jj_2_4(5)) {
        ;
      } else {
        break label_3;
      }
      //parse N dtg blocks
                      t = jj_consume_token(NUMBER);
                        numberOfTransitions = Integer.parseInt(t.toString());

                        for (int i = 0; i < numberOfTransitions; i++)
                        {
                                parseDTGTransition(varId, valueCount, dtg, sp);
                        }

                        valueCount++;
    }
    jj_consume_token(END_DTG);
                {if (true) return dtg;}
    throw new Error("Missing return statement in function");
  }

  final public void parseDTGTransition(int varId, int sourceValue, DomainTransitionGraph dtg, SASProblem sp) throws ParseException {
        Token t, t2, t3;
    t = jj_consume_token(NUMBER);
    //target value
            t2 = jj_consume_token(NUMBER);
    //operator/axiom number
            t3 = jj_consume_token(NUMBER);
                int targetValue = Integer.parseInt(t.toString());
                int operatorIndex = Integer.parseInt(t2.toString());
                int numberOfConditions = Integer.parseInt(t3.toString());

                SASLiteral source = sp.variables.get(varId).getValue(sourceValue);
                SASLiteral target = sp.variables.get(varId).getValue(targetValue);

                //now have to find out whether operatorIndex refers to an axiom or an action operator. This is
                //based on whether the DTG's variable is derived or not respectively.
                SASAction operator = null;
                if (dtg.getVariable() instanceof SASDerivedPredicate)
                {
                        //axioms are sorted by layer, and rule number, such that 
                        // [layer --> [axiom_number --> axiom]]
                        //This is unfortunate for directly accessing the axiom itself, but useful
                        //for axiom evaluation  
                        operator = sasProblemOptimised.getAxiom(operatorIndex);
                }
                else
                {
                        operator = sasProblemOptimised.actions.get(operatorIndex);
                }


                DTGActionEdge edge = new DTGActionEdge(source, operator, target);
                int[] varVal = null;
                if (numberOfConditions > 0)
                {
                        for (int i = 0; i < numberOfConditions; i++)
                        {
                                varVal = parseSASVariableValuePair();

                                int var = this.varIndexMap.get(varVal[0]);
                                //an associated precondition which does not reflect a value within the current variable
                                SASLiteral associated = sp.variables.get(var).getValue(varVal[1]);

                                edge.addAssociatedPrecondition(associated);
                        }
                }
//		else
//		{
//			//if there are no conditions then the "from" prop can be anything, 
//			//so use a NoneOfThoseProposition instead. Note that this could be compiled out to explit props
//			//after the parsing process is complete.
//			SASProposition from = new NoneOfThoseProposition();
////			dtg.addTransition(from, operator, target);
//			edge.setPc(from);
//		}
                dtg.addTransition(edge);
  }

  final public void parseAxioms(SASProblem sp) throws ParseException {
        Token ruleCount;
        Token conditionCount;
        Token objectIdTok, conditionTok, effectTok;
        int objectId, conditionId, effectId;
        SASParameter obj;
        SASProposition condition, effect;
        SASAxiom p;
        SASDerivedPredicate dp;
        int count, realPcVar, realEffVar;
        int[] pcs, eff;
                count = 0;
    ruleCount = jj_consume_token(NUMBER);
    label_4:
    while (true) {
      if (jj_2_5(5)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(BEGIN_RULE);
                        dp = sp.derivedPredicates.get(count);
                        p = new SASAxiom(count, dp);
      conditionCount = jj_consume_token(NUMBER);
                         int conditionCountInt = Integer.parseInt(conditionCount.toString());
                         //parse conditions
                         for (int i = 0; i < conditionCountInt; i++)
                         {
                                 pcs = parseSASVariableValuePair();
                                 realPcVar = this.varIndexMap.get(pcs[0]);
                                 p.setEffectCondition(realPcVar, pcs[1]);
                         }
      label_5:
      while (true) {
        if (jj_2_6(5)) {
          ;
        } else {
          break label_5;
        }
        eff = parseSASEffect();
                                realEffVar = this.varIndexMap.get(eff[0]);

                                p.setEffect(realEffVar, new SASEffect(eff[1], eff[2]));
      }
                        sp.axioms.get(p.getDerivedPredicate().getAxiomLayer()).put(count, p);
                        count++;
      jj_consume_token(END_RULE);
    }
  }

  final public void parseSG() throws ParseException {
    jj_consume_token(BEGIN_SG);
    label_6:
    while (true) {
      if (jj_2_7(5)) {
        ;
      } else {
        break label_6;
      }
      if (jj_2_8(5)) {
        jj_consume_token(NAME);
      } else if (jj_2_9(5)) {
        jj_consume_token(NUMBER);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END_SG);
  }

  final public void parseTestGroups(SASProblem sp) throws ParseException {
    label_7:
    while (true) {
      parsePddlToSasGroup(sp);
      if (jj_2_10(5)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(0);
                this.detectVariableNames(sp);
  }

  final public void parsePddlToSasGroup(SASProblem sp) throws ParseException {
        SASVariable var;
        Token varTok, derived, value;
        SASLiteral p;
        String str;
        String derivedID;
        int varId, valueId;
    varTok = jj_consume_token(NAME);
    jj_consume_token(SEPARATOR);
                str = varTok.toString().substring(3);
                varId = Integer.parseInt(str);
                var = sp.variables.get(varId);
    label_8:
    while (true) {
      value = jj_consume_token(NUMBER);
      jj_consume_token(SEPARATOR);
                valueId = Integer.parseInt(value.toString());
      if (jj_2_11(5)) {
        jj_consume_token(ATOM);
                                                p = parseProposition();
      } else if (jj_2_12(5)) {
        jj_consume_token(NONE_OF_THOSE);
                                p = new NoneOfThoseProposition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                        p.setVariableId(varId);
                        p.setValueId(valueId);
                        var.addValue(p, valueId);
      if (jj_2_13(5)) {
        ;
      } else {
        break label_8;
      }
    }
  }

  final public void parseAllGroups(SASProblem sp) throws ParseException {
        Token t;
        int groupCount = 0;
        SASMutexGroup g;
    jj_consume_token(BEGIN_GROUPS);
    t = jj_consume_token(NUMBER);
    label_9:
    while (true) {
      if (jj_2_14(5)) {
        ;
      } else {
        break label_9;
      }
      g = parseGroup(groupCount, sp);
                sasProblemAll.mutexes.put(groupCount, g);
                sasProblemOptimised.mutexes.put(groupCount, g);

                groupCount++;
    }
    jj_consume_token(END_GROUPS);
    jj_consume_token(0);
                this.detectMutexVariableNames(sp);
  }

  final public SASMutexGroup parseGroup(int groupNumber, SASProblem sp) throws ParseException {
        Token t;
        int mutexSize, varId, valueId;
        SASProposition p;
        SASDerivedPredicate dp;
        Token tokVarId, tokValId, tokPredName, tokParam;
        SASMutexGroup mut;
        StringBuffer strBuf;
    jj_consume_token(GROUP);
    t = jj_consume_token(NUMBER);
                mutexSize = Integer.parseInt(t.toString());
                mut = new SASMutexGroup();
                strBuf = new StringBuffer();
    label_10:
    while (true) {
      tokVarId = jj_consume_token(NUMBER);
                        varId = Integer.parseInt(tokVarId.toString());
      p = parseSASProposition(varId);
                                        sasProblemAll.reachableFacts.add(p);
                                        sasProblemOptimised.reachableFacts.add(p);

                                        //variable may be normal Variable or Derived Predicate
                                        SASParameter var = sp.variables.get(varId).getObject();

                                        mut.setObject(var); //should retain last val
                                        mut.addMutex(p); //add the mutex regardless of the propositions underlying type

      if (jj_2_15(5)) {
        ;
      } else {
        break label_10;
      }
    }
                {if (true) return mut;}
    throw new Error("Missing return statement in function");
  }

  final public SASProposition parseProposition() throws ParseException {
        Token tokPredName, tokNumber, tokParam;
        String predicate;
        String param;
        SASProposition p;
        StringBuffer strBuf = new StringBuffer();
        boolean isDerived;
    if (jj_2_16(5)) {
      tokPredName = jj_consume_token(NAME);
                        isDerived = false;
    } else if (jj_2_17(5)) {
      tokPredName = jj_consume_token(NEW_AXIOM);
                        isDerived = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                strBuf.append(tokPredName.toString());
    if (jj_2_18(5)) {
      jj_consume_token(OPEN);
    } else {
      ;
    }
    label_11:
    while (true) {
      if (jj_2_19(5)) {
        ;
      } else {
        break label_11;
      }
      tokParam = jj_consume_token(NAME);
                strBuf.append(" "+tokParam.toString());
      if (jj_2_20(5)) {
        jj_consume_token(SEPARATOR);
      } else {
        ;
      }
    }
    if (jj_2_21(5)) {
      jj_consume_token(CLOSE);
    } else {
      ;
    }
                StringTokenizer tok = new StringTokenizer(strBuf.toString());
                if (isDerived)
                        p = new SASDerivedProposition(tok.nextToken());
                else
                        p = new SASProposition(tok.nextToken());
                while (tok.hasMoreTokens())
                {
                        p.addParameter(new SASParameter(tok.nextToken()));
                }

                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public SASProposition parseSASProposition(int varId) throws ParseException {
        Token tokGroupId, tokPredName, tokPropId, tokParam;
        int valueId;
        String predicate;
        String param;
        SASProposition pr;
        StringBuffer strBuf = new StringBuffer();
        boolean isDerived;
    tokPropId = jj_consume_token(NUMBER);
    if (jj_2_22(5)) {
      tokPredName = jj_consume_token(NAME);
                                isDerived = false;
    } else if (jj_2_23(5)) {
      tokPredName = jj_consume_token(NEW_AXIOM);
                                isDerived = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                strBuf.append(tokPredName.toString());
                valueId = Integer.parseInt(tokPropId.toString());
    jj_consume_token(NUMBER);
    label_12:
    while (true) {
      if (jj_2_24(5)) {
        ;
      } else {
        break label_12;
      }
      tokParam = jj_consume_token(NAME);
                strBuf.append(" "+tokParam.toString());
    }
                StringTokenizer tok = new StringTokenizer(strBuf.toString());
                if (isDerived)
                        pr = new SASDerivedProposition(tok.nextToken());
                else
                        pr = new SASProposition(tok.nextToken());

                while (tok.hasMoreTokens())
                {
                        pr.addParameter(new SASParameter(tok.nextToken()));
                }

                pr.setVariableId(varId);
                pr.setValueId(valueId);

                {if (true) return pr;}
    throw new Error("Missing return statement in function");
  }

  final public void parseOutputSAS(SASProblem sp) throws ParseException {
   Token t;
   boolean suc = true;
    if (jj_2_25(5)) {
      parseMetric(sp);
    } else {
      ;
    }
    parseVariableSection(sp);
    parseInitialState(sp);
    parseGoal(sp);
    parseOperators(sp);
    if (jj_2_26(5)) {
      parseAxioms(sp);
    } else {
      ;
    }
    jj_consume_token(0);
  }

  final public void parseOperators(SASProblem sp) throws ParseException {
        Token t;
        SASAction a;
        int operatorCount = 0;
    t = jj_consume_token(NUMBER);
    label_13:
    while (true) {
      a = parseOperator(operatorCount);
                sp.actions.put(operatorCount, a);

                operatorCount++;
      if (jj_2_27(5)) {
        ;
      } else {
        break label_13;
      }
    }
  }

  final public SASAction parseOperator(int operatorId) throws ParseException {
        Token t, tvar, told, tnew;
        SASAction a;
        String actionName;
        int prevailCount;
        int effectCount;
        int cost;
        int varId, oldVal, newVal;
    jj_consume_token(BEGIN_OPERATOR);
    actionName = parseActionName();
                a = new SASAction(operatorId, actionName);
    //prevail conditions
            t = jj_consume_token(NUMBER);
                prevailCount = Integer.parseInt(t.toString());
                if (prevailCount > 0)
                {
                        for (int i = 0; i < prevailCount; i++)
                        {
                                int[] arr = parseSASVariableValuePair();

                                //need to translate the var number into the var index for this file's variable list
                                int var = this.varIndexMap.get(arr[0]);
                                //int val = this.varIndexMap.get(arr[1]);

                                a.setPrevail(var, arr[1]);
                        }
                }
    //effect count
            t = jj_consume_token(NUMBER);
                effectCount = Integer.parseInt(t.toString());

                for (int i = 0; i < effectCount; i++)
                {
                        int[] effectConditions = parseEffectConditions();
                        for (int j = 0; j < effectConditions.length; j+=2)
                        {
                                a.setEffectCondition(effectConditions[j], effectConditions[j+1]);
                        }

                        int[] arr = parseSASEffect();
                        //need to translate the var number into the var index for this file's variable list
                        varId = this.varIndexMap.get(arr[0]);
                        oldVal = arr[1];
                        newVal = arr[2];

                        a.setEffect(varId, new SASEffect(oldVal, newVal));
                }
    //finally, cost
            t = jj_consume_token(NUMBER);
    jj_consume_token(END_OPERATOR);
                cost = Integer.parseInt(t.toString());
                a.setCost(cost);
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public int[] parseEffectConditions() throws ParseException {
        Token t, t1, t2;
        int[] arr;
    t = jj_consume_token(NUMBER);
                int effectConditions = Integer.parseInt(t.toString());
                arr = new int[effectConditions * 2];

                if (effectConditions > 0)
                {
                        for (int i = 0; i < effectConditions; i+=2)
                        {
                                int[] pair = parseSASVariableValuePair();
                                arr[i] = pair[0];
                                arr[i+1] = pair[1];
                        }
                }
                {if (true) return arr;}
    throw new Error("Missing return statement in function");
  }

  final public int[] parseSASEffect() throws ParseException {
        Token[] arr;
        int[] num;
                arr = new Token[3];
                num = new int[3];
    arr[0] = jj_consume_token(NUMBER);
    arr[1] = jj_consume_token(NUMBER);
    arr[2] = jj_consume_token(NUMBER);
                num[0] = Integer.parseInt(arr[0].toString());
                num[1] = Integer.parseInt(arr[1].toString());
                num[2] = Integer.parseInt(arr[2].toString());

                {if (true) return num;}
    throw new Error("Missing return statement in function");
  }

  final public String parseActionName() throws ParseException {
        Token tokPredName, tokParam;
        StringBuffer strBuf = new StringBuffer();
    tokPredName = jj_consume_token(NAME);
                strBuf.append(tokPredName.toString());
    if (jj_2_28(5)) {
      jj_consume_token(OPEN);
    } else {
      ;
    }
    label_14:
    while (true) {
      if (jj_2_29(5)) {
        ;
      } else {
        break label_14;
      }
      tokParam = jj_consume_token(NAME);
                strBuf.append(" "+tokParam.toString());
      if (jj_2_30(5)) {
        jj_consume_token(SEPARATOR);
      } else {
        ;
      }
    }
    if (jj_2_31(5)) {
      jj_consume_token(CLOSE);
    } else {
      ;
    }
                {if (true) return strBuf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public int[] parseSASVariableValuePair() throws ParseException {
        Token t1, t2;
        int[] arr = new int[2];
    t1 = jj_consume_token(NUMBER);
    t2 = jj_consume_token(NUMBER);
                arr[0] = Integer.parseInt(t1.toString());
                arr[1] = Integer.parseInt(t2.toString());

                {if (true) return arr;}
    throw new Error("Missing return statement in function");
  }

  final public void parseGoal(SASProblem sp) throws ParseException {
        Token t1, t2;
        int varId;
        int varIndex;
    jj_consume_token(BEGIN_GOAL);
    jj_consume_token(NUMBER);
    label_15:
    while (true) {
      t1 = jj_consume_token(NUMBER);
      t2 = jj_consume_token(NUMBER);
                        varId = Integer.parseInt(t1.toString());
                        varId = this.varIndexMap.get(varId);
                        varIndex = Integer.parseInt(t2.toString());

                        sp.goal.put(varId, varIndex);
      if (jj_2_32(5)) {
        ;
      } else {
        break label_15;
      }
    }
    jj_consume_token(END_GOAL);
  }

  final public void parseInitialState(SASProblem sp) throws ParseException {
        Token t;
        int count = 0;
        int varId, varIndex;
    jj_consume_token(BEGIN_STATE);
    label_16:
    while (true) {
      t = jj_consume_token(NUMBER);
                        varId = this.varIndexMap.get(count);
                        varIndex = Integer.parseInt(t.toString());

                        SASVariable v = sp.variables.get(varId);
                        if (v instanceof SASDerivedPredicate)
                        {
                                //if var is a derived predicate then it also must memorise the default value.
                                ((SASDerivedPredicate)v).setDefaultValue(varIndex);
                        }

                        //set initial value
                        v.setCurrentValue(varIndex);
                        sp.initial.put(varId, varIndex);

                        count++;
      if (jj_2_33(5)) {
        ;
      } else {
        break label_16;
      }
    }
    jj_consume_token(END_STATE);
  }

  final public void parseVariableSection(SASProblem sp) throws ParseException {
   Token t;
   String var;
   int varCount = 0;
   int axiomCount = 0;
   SASVariable v;
    jj_consume_token(BEGIN_VARIABLES);
    t = jj_consume_token(NUMBER);
    label_17:
    while (true) {
      var = parseVariable();
                        StringTokenizer strTok = new StringTokenizer(var);

                        int variable = Integer.parseInt(strTok.nextToken().substring(3));
                        this.varIndexMap.put(varCount, variable);

                        if (sp.variables.containsKey(variable) == false)
                        {
                                int valueCount = Integer.parseInt(strTok.nextToken());
                                int axiomLayer = Integer.parseInt(strTok.nextToken());

                                v = new SASVariable(variable, varCount, valueCount);

                                if (axiomLayer > -1)
                                {
                                        v = new SASDerivedPredicate(variable, varCount, valueCount, axiomLayer, "axiom_variable" + axiomCount);

                                        if (sp.derivedPredicates.containsKey(axiomCount) == false)
                                        {
                                                sp.derivedPredicates.put(axiomCount, (SASDerivedPredicate) v);
                                        }
                                        else
                                        {
                                                v = sp.derivedPredicates.get(axiomCount);
                                        }

                                        sp.axioms.put(axiomLayer, new HashMap<Integer, SASAxiom>());

                                        axiomCount++;
                                }

                                sp.variables.put(variable, v);
                        }
                        else
                        {
                                v = sp.variables.get(variable);
                        }

                        varCount++;
      if (jj_2_34(5)) {
        ;
      } else {
        break label_17;
      }
    }
    jj_consume_token(END_VARIABLES);
  }

  final public String parseVariable() throws ParseException {
        Token tname, t1, tderived;
        int var, valueCount;
    //   tname = <NAME> t1=<NUMBER> tderived = <NUMBER> //if derived tderived will be non-zero (see sas-format.txt), otherwise -1
       tname = jj_consume_token(NAME);
    t1 = jj_consume_token(NUMBER);
    tderived = jj_consume_token(NUMBER);
           //var = Integer.parseInt(t1.toString());
//	   valueCount = Integer.parseInt(t1.toString());
           {if (true) return tname.toString() + " "+ t1.toString() + " "+ tderived.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void parseMetric(SASProblem sp) throws ParseException {
        Token t;
    jj_consume_token(BEGIN_METRIC);
    t = jj_consume_token(NUMBER);
    jj_consume_token(END_METRIC);
         int i = Integer.parseInt(t.toString());
         if (i == 0)
                sp.optimisePlanLength = true;
         else
                sp.optimisePlanLength = false;
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_3_20() {
    if (jj_scan_token(SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(OPEN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(NONE_OF_THOSE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(BEGIN_RULE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_RULE)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(NEW_AXIOM)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(BEGIN_DTG)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_DTG)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(OPEN)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(SEPARATOR)) return true;
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(NEW_AXIOM)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    if (jj_scan_token(NUMBER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(BEGIN_OPERATOR)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(BEGIN_METRIC)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(END_METRIC)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SASplusParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[34];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SASplusParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SASplusParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SASplusParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SASplusParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SASplusParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SASplusParser(SASplusParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SASplusParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 34; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
